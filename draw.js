// Generated by CoffeeScript 1.6.3
(function() {
  var Animator, FADE, GLOW, INNER_RADIUS, NOTES, NOTE_RADIUS, PLAY_COLOR, PLAY_NOTE_RADIUS, PLAY_STROKE, RADIUS, RadMusic, WEB_STROKE;

  RADIUS = 750;

  INNER_RADIUS = 150;

  NOTES = 60;

  PLAY_NOTE_RADIUS = 14;

  PLAY_STROKE = 7;

  PLAY_COLOR = "#FD405E";

  NOTE_RADIUS = 8;

  WEB_STROKE = 4;

  GLOW = 300;

  FADE = 200;

  RadMusic = (function() {
    function RadMusic(radius, innerRadius, notes) {
      this.radius = radius != null ? radius : RADIUS;
      this.innerRadius = innerRadius != null ? innerRadius : INNER_RADIUS;
      this.notes = notes != null ? notes : NOTES;
      this.midiRefs = {};
      this.animator = new Animator();
    }

    RadMusic.prototype.render = function(el) {
      var circle, circles, i, line, lines, o, r, x, xx, y, yy, _i, _ref;
      this.svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      this.svg.setAttribute("width", this.radius);
      this.svg.setAttribute("height", this.radius);
      circles = document.createElementNS("http://www.w3.org/2000/svg", "g");
      lines = document.createElementNS("http://www.w3.org/2000/svg", "g");
      xx = yy = null;
      for (i = _i = 0, _ref = this.notes; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        o = -1 * (2 * Math.PI / 12 * (i % 12) - Math.PI);
        r = (this.innerRadius + i * (this.radius - 10 - this.innerRadius) / this.notes) / 2;
        x = this.radius / 2 + r * Math.sin(o);
        y = this.radius / 2 + r * Math.cos(o);
        circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
        circle.setAttribute("r", NOTE_RADIUS);
        circle.setAttribute("fill", "#9ea2b8");
        circle.setAttribute("cx", x);
        circle.setAttribute("cy", y);
        circles.appendChild(circle);
        this.midiRefs[i + 24] = circle;
        if (xx) {
          line = document.createElementNS("http://www.w3.org/2000/svg", "line");
          line.setAttribute("x1", xx);
          line.setAttribute("y1", yy);
          line.setAttribute("x2", x);
          line.setAttribute("y2", y);
          line.setAttribute("stroke-width", WEB_STROKE);
          line.setAttribute("stroke", "#494E6B");
          lines.appendChild(line);
        }
        xx = x;
        yy = y;
      }
      this.svg.appendChild(lines);
      this.svg.appendChild(circles);
      el.appendChild(this.svg);
      return this.update();
    };

    RadMusic.prototype.drawKey = function(key, scale) {
      var count, i, k, l, ref, _i, _len, _ref, _results;
      _ref = this.midiRefs;
      for (k in _ref) {
        ref = _ref[k];
        ref.setAttribute("fill", "#494E6B");
      }
      count = 0;
      _results = [];
      for (_i = 0, _len = scale.length; _i < _len; _i++) {
        l = scale[_i];
        if (l === "W") {
          count += 2;
        }
        if (l === "H") {
          count += 1;
        }
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (i = _j = -1; _j <= 5; i = ++_j) {
            _results1.push((_ref1 = this.midiRefs[24 + key + 12 * i + count]) != null ? _ref1.setAttribute("fill", "#9ea2b8") : void 0);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    RadMusic.prototype.press = function(key) {
      var circle;
      circle = this.midiRefs[key];
      return this.animator.addKeyPress({
        key: key,
        x: parseInt(circle.getAttribute("cx")),
        y: parseInt(circle.getAttribute("cy")),
        pressedAt: Date.now()
      });
    };

    RadMusic.prototype.unpress = function(key) {
      return this.animator.removeKeyPress(key);
    };

    RadMusic.prototype.update = function() {
      this._clear();
      this.animator.update();
      return requestAnimationFrame(this.update.bind(this));
    };

    RadMusic.prototype._clear = function() {
      if (this.animations) {
        this.svg.removeChild(this.animations);
      }
      if (this.animations) {
        this.animations.innerHTML = "";
      }
      this.animations = document.createElementNS("http://www.w3.org/2000/svg", "g");
      this.svg.appendChild(this.animations);
      return this.animator.setLayerElement(this.animations);
    };

    return RadMusic;

  })();

  Animator = (function() {
    function Animator(svg) {
      this.svg = svg;
      this.keyPresses = {};
    }

    Animator.prototype.addKeyPress = function(keyPress) {
      if (!this.keyPresses[keyPress.key]) {
        return this.keyPresses[keyPress.key] = keyPress;
      }
    };

    Animator.prototype.removeKeyPress = function(key) {
      return this.keyPresses[key].unpressedAt = Date.now();
    };

    Animator.prototype.update = function() {
      var count, key, keyPress, life, now, other, otherkey, press, x, y, _ref, _ref1, _ref2, _ref3, _results, _results1;
      now = Date.now();
      _ref = this.keyPresses;
      for (key in _ref) {
        keyPress = _ref[key];
        if (now - keyPress.unpressedAt > 50) {
          delete this.keyPresses[key];
        }
      }
      count = Object.keys(this.keyPresses).length;
      if (count === 0) {
        return "idle";
      }
      if (count === 1) {
        _ref1 = this.keyPresses;
        _results = [];
        for (key in _ref1) {
          keyPress = _ref1[key];
          life = now - keyPress.pressedAt;
          if (life < 500) {
            this._drawGlowerAt(keyPress.x, keyPress.y, 8 + 4 * life / 500, 1 - life / 500);
          }
          _results.push(this._drawNoteAt(keyPress.x, keyPress.y));
        }
        return _results;
      } else {
        _ref2 = this.keyPresses;
        _results1 = [];
        for (key in _ref2) {
          press = _ref2[key];
          life = now - press.pressedAt;
          _ref3 = this.keyPresses;
          for (otherkey in _ref3) {
            other = _ref3[otherkey];
            if (other.key !== press.key) {
              if (life < 100) {
                x = other.x - (other.x - press.x) * life / 100;
                y = other.y - (other.y - press.y) * life / 100;
                this._drawNoteAt(x, y);
                this._drawLine(other.x, other.y, x, y);
              } else if (now - other.pressedAt >= 100) {
                this._drawLine(other.x, other.y, press.x, press.y);
              }
            }
          }
          if ((50 <= life && life < 700)) {
            this._drawGlowerAt(press.x, press.y, PLAY_NOTE_RADIUS + 8 * (life - 50) / 500, 1 - (life - 50) / 500);
            this._drawNoteAt(press.x, press.y);
          }
          if (life >= 700) {
            _results1.push(this._drawNoteAt(press.x, press.y));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }
    };

    Animator.prototype.setLayerElement = function(svg) {
      return this.svg = svg;
    };

    Animator.prototype.killAll = function() {
      var key, keyPress, _ref, _results;
      _ref = this.keyPresses;
      _results = [];
      for (key in _ref) {
        keyPress = _ref[key];
        if (keyPress.unpressedAt) {
          _results.push(delete this.keyPresses[key]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Animator.prototype._drawGlowerAt = function(x, y, size, opacity) {
      return this._drawCircle(x, y, size, opacity, "#fff");
    };

    Animator.prototype._drawNoteAt = function(x, y, size, opacity) {
      if (size == null) {
        size = PLAY_NOTE_RADIUS;
      }
      if (opacity == null) {
        opacity = 1;
      }
      return this._drawCircle(x, y, size, opacity, PLAY_COLOR);
    };

    Animator.prototype._drawCircle = function(x, y, size, opacity, fill) {
      var circle;
      circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
      circle.setAttribute("r", size);
      circle.setAttribute("fill", fill);
      circle.setAttribute("cx", x);
      circle.setAttribute("cy", y);
      circle.setAttribute("fill-opacity", opacity);
      return this.svg.appendChild(circle);
    };

    Animator.prototype._drawLine = function(x1, y1, x2, y2) {
      var line;
      line = document.createElementNS("http://www.w3.org/2000/svg", "line");
      line.setAttribute("x1", x1);
      line.setAttribute("y1", y1);
      line.setAttribute("x2", x2);
      line.setAttribute("y2", y2);
      line.setAttribute("stroke-width", PLAY_STROKE);
      line.setAttribute("stroke", PLAY_COLOR);
      line.setAttribute("stroke-opacity", "0.4");
      return this.svg.appendChild(line);
    };

    return Animator;

  })();

  window.RadMusic = RadMusic;

}).call(this);
